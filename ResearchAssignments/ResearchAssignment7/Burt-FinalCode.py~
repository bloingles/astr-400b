import numpy as np
from numpy.typing import NDArray
import astropy.units as u
import matplotlib
import matplotlib.pyplot as plt
from ReadFile import Read
from Lab7 import RotateFrame
from CenterOfMass2 import CenterOfMass
from Snapshots import snapshotsCompile
import os
from collections import deque

def majorAnnuli(
        x:NDArray[np.float64],
        y:NDArray[np.float64],
        Nmin:int,
        Nmax:int,
        delta:float = 0.15
) -> NDArray[np.int_]:
    """
    This function finds the mass of each overlapping annulus

    Arguments:
        x (kpc): adjusted sorted x positions of the stars
        y (kpc): adjusted sorted y positions of the stars
        Nmin: The minimum number of stars per annulus
        Nmax: The maximum number of stars per annulus
        delta: A parameter that determines where to divide the annulus
               r[last-1]/r[first] < 10**delta
    Returns:
        binIndices: contains the minimum and maximum radius of each annulus
    """

    binIndices:collections.deque = deque()
    r:NDArray[np.float64] = np.linalg.norm(np.vstack((x,y)),axis=0)

    i:int = 0
    N:int = r.size

    while i < N:
        first:int = i
        last:int = min((N,i+Nmin))

        while last < N and (last-first) < Nmax and (r[last-1]/r[first] < 10**delta):
            last += 1
        binIndices.append((first,last))
        i = last

    binIndicesArr = np.array(binIndices,dtype=int)
    return binIndicesArr

def overlapAnnuli(
        binIndices:NDArray[np.int_],
        r:NDArray[np.float64]
) -> NDArray[np.int_]:
    """
    This function finds the mass of each overlapping annulus
    
    Arguments:
        binIndices: contains the minimum and maximum radius of each annulus
        r (kpc): sorted radii of the stars
    Returns:
        overlapIndices: binIndices with the added overlap regions between them.
    """

    overlapIndices:NDArray[np.int_] = np.zeros((2*binIndices.shape[0]-1,2), dtype=np.int_)
    overlapIndices[::2] = binIndices
    overlapIndices[1:-1:2] = (binIndices[:-1] + binIndices[1:])//2
    return overlapIndices

def barStrength(
        x:NDArray[np.float64],
        y:NDArray[np.float64],
        m:NDArray[np.float64],
        annuli:NDArray[np.int_],
        nphi:int,
        mMax:int
) -> tuple[NDArray[np.float64],float]:
    """
    This function finds the mass of each overlapping annulus and performs a Fourier
    analysis to compute the bar strength as the different in the root-mean-squared
    of the even and odd modes

    Arguments:
        x (kpc): adjusted sorted x positions of the stars
        y (kpc): adjusted sorted y positions of the stars
        m (10^10 Msun): sorted masses of the stars
        annuli: contains the minimum and maximum radius of each annulus
                This should be taken from the overlapping annuli
        nphi: number of desired azimuthal bins
        mMax: largest mode for the Fourier analysis
    
    Returns:
        strengthsArr: an array of S values for each overlapping bin.
        galaxyStrength: the maximum S value (used to quantify the overall bar strength).
    """
    r = np.linalg.norm(np.vstack((x,y)),axis=0)
    phi = np.mod(np.arctan2(y,x),2*np.pi)
    
    mModes:NDArray[np.float64] = np.arange(1,mMax+1)
    strengthsArr:NDArray[np.float64] = np.zeros(np.shape(annuli)[0])

    mAnnuli:NDArray[np.float64] = np.zeros(annuli.shape[0])
    for i,annulus in enumerate(annuli):
        first,last = annulus
        mAnnulus:NDArray[np.float64] = m[first:last]
        phiAnnulus:NDArray[np.float64] = phi[first:last]

        mAnnuli[i] = np.sum(mAnnulus)

        MProf:NDArray[np.float64]
        MProf,_ = np.histogram(phiAnnulus,bins=nphi,range=(0,2*np.pi),weights=mAnnulus)

        Sigma:float
        mAmp:NDArray[np.float64]
        mPhase:NDArray[np.float64]
        Sigma,mAmp,mPhase = fourier(MProf, mModes)
     
        oddAmp:NDArray[np.float64] = mAmp[0::2]
        evenAmp:NDArray[np.float64] = mAmp[1::2]
        annulusStrength:float = np.sqrt(np.sum(evenAmp**2))
        strengthsArr[i] = annulusStrength
    galaxyStrength:float = np.sum(strengthsArr*mAnnuli)/np.sum(mAnnuli)
    
    return strengthsArr,galaxyStrength

def fourier(
        MProf:NDArray[np.float64],
        mModes:NDArray[np.float64]
) -> tuple[float,NDArray[np.float64],NDArray[np.float64]]:
    """
    This function runs a simple Fourier analysis using a uniform (tophat) window.

    Arguments:
        MProf (10^10 Msun): the mass profile of the annuli
        mModes: all modes necessary for analysis
        mMax: largest mode for the Fourier analysis
    
    Returns:
        Sigma (10^10 Msun): the mean value of the profile
        mAmp: the amplitudes of mode m
        mPhase: the phases of mode m
    """
    
    n:int = MProf.size
    Sigma:float = np.mean(MProf)
    mAmp:NDArray[np.float64] = np.zeros(mModes.size)
    mPhase:NDArray[np.float64] = np.zeros(mModes.size)
    theta:NDArray[np.float64] = np.linspace(0,2*np.pi,n,endpoint=False)
    for i,m in enumerate(mModes):
        cn:float = np.sum(MProf*np.exp(-1j*m*theta))
        mAmp[i] = np.abs(cn)
        mPhase[i] = np.angle(cn)
    return Sigma,mAmp,mPhase


def plotBarStrengthPerAnnulus(
    strengthsArr:NDArray[np.float64],
    annuliIndices:NDArray[np.int_],
    r:NDArray[np.float64],
    snapshot:int,
    galaxy:str,
    fig=None,
    ax=None
) -> None:
    # All the inner edges of the annuli
    edges:NDArray[np.int_] = r[annuliIndices[:,0]]

    # Places the most outer edge at the end
    edges = np.concatenate((r[annuliIndices[:,0]],[r[annuliIndices[-1,1]-1]]))

    midpoints:NDArray[np.float64] = 0.5*(edges[:-1]+edges[1:])
    widths:NDArray[np.float64] = edges[1:] - edges[:-1]

    if fig == None or ax == None:
        fig,ax = plt.subplots()
    ax.bar(midpoints, strengthsArr, width=widths, align='center',
           edgecolor='k', alpha=0.7)
    
    ax.text(0.92,0.82,galaxy,transform=ax.transAxes,ha="right",va="center",size=12)
    ax.text(0.92,0.68,f'{snapshot/70:.2f} Gyr',transform=ax.transAxes,ha="right",va="center",size=12)
    ax.tick_params(labelsize=14)

    ax.set(
        xlim=(-5,79.7),
        ylim=(0,0.7)
        )

    #fig.savefig(f"{galaxy}_{snapshot:03d}_bar_histogram.pdf")

def plotGalaxyStrengthPerSnapshot(
        strengths:NDArray[np.float64],
        galaxy:str,
        fig=None,
        ax=None
)-> None:

    if fig == None or ax == None:
        fig,ax = plt.subplots()
    ax.plot(strengths[:,0]/70,strengths[:,1],c='r')
    ax.text(0.15,0.82,galaxy,transform=ax.transAxes,ha="right",va="center",size=22)
    ax.tick_params(labelsize=20)

    # ax.set(title=f"{galaxy} Strength per snapshot",xlabel='Snapshot',ylabel='Bar Strength')
    # fig.savefig(f"{galaxy}_bar_strength.pdf")

def main() -> None:
    foci:tuple[int,...] = (275,410,470) # 3.929 Gyr, # 5.857 Gyr, # 6.714 Gyr

    first:int = 0
    last:int = 801

    # generates majors from the halfway points between foci
    fociArr:NDArray[np.int_] = np.sort(np.array(foci))
    halfways:NDArray[np.int_] = (fociArr[:-1]+fociArr[1:])//2

    majors:NDArray[np.int_] = np.array([first,*tuple(halfways),last-1])
    snapshots:tuple[int,...] = snapshotsCompile(4,foci=foci)

    # Parameters
    Nmin:int = 8000 # minimum number of particles per major annulus
    Nmax:int = 64000 # maximum number of particles per major annulus
    nphi:int = 360 # angle iterations to cover a circle
    mMax:int = 2 # For max resoluion, this would be the Nyquist frequency.
                 # However, this makes the data noisy
    galaxies:tuple[str,str] = ('MW','M31')
    strengths:NDArray[np.float64] = np.zeros((len(snapshots),2))

    fig1,ax1 = plt.subplots(len(galaxies),1,sharex=True,sharey=True,figsize=(8,6),gridspec_kw={'hspace':0,'wspace':0})

    fig2,ax2 = plt.subplots(majors.size,len(galaxies),sharex=True,sharey=True,figsize=(8,6),gridspec_kw={'hspace':0,'wspace':0})

    for j,galaxy in enumerate(galaxies):
        maji:int = 0
        for i,snapshot in enumerate(snapshots):
            ScriptDir = os.path.dirname(os.path.abspath(__file__))
            filename = os.path.join(ScriptDir,galaxy,f"{galaxy}_{snapshot:03d}.txt")
            time:u.Quantity
            total:int
            data:NDArray[np.float64]
            time,total,data = Read(filename)

            com:CenterOfMass2.CenterOfMass = CenterOfMass(filename,2)
            comMass:NDArray[np.float64] = com.m

            COMP:u.Quantity = com.COM_P(0.1)
            COMV:u.Quantity = com.COM_V(COMP[0],COMP[1],COMP[2])

            # Determine positions of disk particles relative to COM
            xcom:NDArray[np.float64] = com.x - COMP[0].value
            ycom:NDArray[np.float64] = com.y - COMP[1].value
            zcom:NDArray[np.float64] = com.z - COMP[2].value
            rcom:NDArray[np.float64] = np.vstack((xcom,ycom,zcom)).T

            vxcom:NDArray[np.float64] = com.vx - COMV[0].value
            vycom:NDArray[np.float64] = com.vy - COMV[1].value
            vzcom:NDArray[np.float64] = com.vz - COMV[2].value
            vcom:NDArray[np.float64] = np.vstack((vxcom,vycom,vzcom)).T

            rComps,vComps = RotateFrame(rcom,vcom)
            rUnsorted = np.linalg.norm(rComps, axis=1)
            ri:int = np.argsort(rUnsorted)
            r:NDArray[np.float64] = rUnsorted[ri]

            mass:NDArray[np.float64] = comMass[ri]
            x:NDArray[np.float64] = rComps[ri,0]
            y:NDArray[np.float64] = rComps[ri,1]
            z:NDArray[np.float64] = rComps[ri,2]

            # NOTE: The velocity is currently unused
            vx:NDArray[np.float64] = vComps[ri,0]
            vy:NDArray[np.float64] = vComps[ri,1]
            vz:NDArray[np.float64] = vComps[ri,2]
            v:NDArray[np.float64] = np.linalg.norm(np.vstack((vx,vy,vz)),axis=0)


            majorAnnuliIndices:NDArray[np.int_] = majorAnnuli(x,y,Nmin,Nmax)
            overlappingAnnuliIndices:NDArray[np.int_] = overlapAnnuli(majorAnnuliIndices,r)
            strengthsArr,galaxyStrength = barStrength(x,y,mass,overlappingAnnuliIndices,nphi,mMax)

            strengths[i] = np.array([snapshot,galaxyStrength])
            if maji < majors.size and snapshot >= majors[maji]:
                plotBarStrengthPerAnnulus(
                    strengthsArr,
                    overlappingAnnuliIndices,
                    r,
                    snapshot,
                    galaxy,
                    fig=fig2,
                    ax=ax2[maji,j]
                )

                maji += 1
        plotGalaxyStrengthPerSnapshot(strengths,galaxy,fig1,ax1[j])


    fig1.supxlabel('time [Gyr]', fontsize=22)
    fig1.supylabel('Bar Strength', fontsize=22)
    fig1.savefig("bar_strength.pdf") 

    fig2.supxlabel('Radius [kpc]', fontsize=22)
    fig2.supylabel('Bar Strength', fontsize=22)
    fig2.savefig("bar_histogram.pdf") 


if __name__ == '__main__':
    main()
